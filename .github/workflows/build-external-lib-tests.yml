name: external-lib-tests

on:
  push:
    branches:
      - dannys4/issue50
  pull_request: {}

jobs:
  build-tests:
    runs-on: ubuntu-latest
    steps:
      - name: Use Conda
        uses: conda-incubator/setup-miniconda@v2
        with:
          auto-update-conda: true
          python-version: "3.8"
          activate-environment: "test"

      - name: Checkout MParT
        uses: actions/checkout@v3
        with:
          path: mpart

      - name: Cache Kokkos
        id: cache-kokkos 
        uses: actions/cache@v3
        env:
          cache-name: cache-build-kokkos
        with:
          path: ${{ github.workspace }}/KOKKOS_INSTALL
          key: ${{ runner.os }}-${{ env.cache-name }}

      - name: Checkout Kokkos
        if: steps.cache-kokkos.outputs.cache-hit != 'true'
        uses: actions/checkout@v3
        with:
          repository: kokkos/kokkos
          path: kokkos

      - name: Install Kokkos
        if: steps.cache-kokkos.outputs.cache-hit != 'true'
        run: |
          cd $GITHUB_WORKSPACE/kokkos
          mkdir build && cd build
          cmake -DKokkos_ENABLE_PTHREAD=ON \
                -DBUILD_SHARED_LIBS=ON     \
                -DKokkos_ENABLE_SERIAL=ON  \
                -DKokkos_CXX_STANDARD=17   \
                -DCMAKE_INSTALL_PREFIX=$GITHUB_WORKSPACE/KOKKOS_INSTALL/ \
                ../
          sudo make install

      - name: Install Eigen, Catch2, Pybind11
        shell: bash -l {0}
        run: conda install -c conda-forge -y eigen catch2 pybind11

      - name: Configure MParT
        shell: bash -l {0}
        run: |
          cd $GITHUB_WORKSPACE/mpart
          mkdir build && cd build
          cmake -DKokkos_DIR=$GITHUB_WORKSPACE/KOKKOS_INSTALL/lib/cmake/Kokkos ../

      - name: Build MParT
        shell: bash -l {0}
        run: cd $GITHUB_WORKSPACE/mpart/build; make

      - name: Run Tests
        shell: bash -l {0}
        run: |
          cd $GITHUB_WORKSPACE/mpart/build
          ./RunTests --reporter junit -o test-results-external.xml

      - name: Publish Unit Test Results
        uses: EnricoMi/publish-unit-test-result-action@v1
        if: always()
        with:
          check_name: "Test Results with Externally Built Libraries"
          files: ${{ github.workspace }}/mpart/build/test-results-external.xml